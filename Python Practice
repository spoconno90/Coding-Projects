Python Practice Project for Associating Menu Items > Menus > Franchises > Businesses through Object Oriented Programming

#Various menu items and costs stored in dictionaries
brunch_items = {
  'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50, 'coffee': 1.50, 'espresso': 3.00, 'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50
}
early_bird_items = {
  'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00, 'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 1.50, 'espresso': 3.00,
}
dinner_items = {
  'crostini with eggplant caponata': 13.00, 'caesar salad': 16.00, 'pizza with quattro formaggi': 11.00, 'duck ragu': 19.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 2.00, 'espresso': 3.00,
}
kids_items = {
  'chicken nuggets': 6.50, 'fusilli with wild mushrooms': 12.00, 'apple juice': 3.00
}

arepas_menu = {
  'arepa pabellon': 7.00, 'pernil arepa': 8.50, 'guayanes arepa': 8.00, 'jamon arepa': 7.50
}

#Creating Menu Class 
class Menu:

#Constructor to initalize and define attributes
  def __init__(self, name, items, start_time, end_time):
    self.name = name
    self.items = items
    self.start_time = start_time
    self.end_time = end_time

#To return this string that can be printed with print(Menu object)
  def __repr__(self):
    return self.name + " menu available from " + self.start_time + " to " + self.end_time

#Creating a method to calculate the bill
  def calculate_bill(self, purchased_items):
    bill = 0
    for item in purchased_items:
      if item in self.items:
        bill += self.items[item] 
    return bill

#Creating Franchise Class
class Franchise:

#Constructor to initalize and assign attributes
  def __init__(self, address, menus):
    self.address = address
    self.menus = menus

#__repr__ method used to convert self to string
  def __repr__(self):
    return self.address

#method to output the menus available given a time of day
  def available_menus(self, time):
    available_menus = []
    if time >= 11 and time < 15: 
      available_menus.append(brunch)
    elif time >= 15 and time < 16: 
      available_menus.append(brunch)
      available_menus.append(early_bird)
    elif time >= 16 and time < 18: 
      available_menus.append(early_bird)
    elif time >= 18 and time < 23: 
      available_menus.append(dinner)
    else: 
      pass
    return available_menus

#Creating Business class
class Business:
  def __init__(self, name, franchises):
    self.name = name
    self.franchises = franchises
    pass

#Creating Menu objects
brunch = Menu("Brunch", brunch_items, "11am", "4pm")
early_bird = Menu("Early Bird", early_bird_items, "3pm", "6pm")
dinner = Menu("Dinner", dinner_items, "6pm", "11pm")
kids = Menu("Kids", kids_items, "11am", "9pm")
arepas  = Menu("Arepas", arepas_menu, "11am", "9pm")

#Printing text from __repr__
print("\n**This is a test of the __repr__ constructor**")
print(brunch)
print(early_bird)
print(dinner)
print(kids)
print(arepas)

#Calculating bill for a set of items with the calculate_bill method
print("\n**This is a test of the calculate_bill method**")
print("This brunch bill is $" + str(brunch.calculate_bill(["pancakes", "home fries", "coffee"])))
print("This early bird bill is $" + str(early_bird.calculate_bill(["salumeria plate", "vegan mushroom ravioli"])))

#Creating flagship_store, new_installment, and arepas_place Franchise objects
flagship_store = Franchise("1232 West End Road", [kids, brunch, early_bird, dinner])
new_installment = Franchise("12 East Mulberry Street", [kids, brunch, early_bird, dinner])
arepas_place = Franchise("189 Fitzgerald Avenue", arepas)

#Testing the available_menus method
print("\n**This is a test of the available_menus method**")
print(flagship_store.available_menus(12))
print(flagship_store.available_menus(17))

#Creating Business objects
basta = Business("Basta Fazoolin' with my Heart", [flagship_store, new_installment])
arepas = Business("Take a' Arepa", [arepas_place])

#Testing to see if a menu in a franchise in a business can be printed
print("\n**This is a test to see if the objected oriented programming is working to allow a menu in a franchise in a business to be printed**")
print(arepas.franchises[0].menus)
print(basta.franchises[0].menus[0])
